/* eslint-disable @typescript-eslint/no-unused-vars */
import {Alert, Text, TextInput, TouchableOpacity, View} from 'react-native';
import React, {useState} from 'react';
import Icon from 'react-native-vector-icons/FontAwesome';
import {NativeStackScreenProps} from '@react-navigation/native-stack';
import {RootStackParams} from '../typings/route';
import {styles} from './Styles';

type SplashProps = NativeStackScreenProps<RootStackParams>;

const SetUpProfile: React.FC<SplashProps> = ({navigation}) => {
  const [name, setName] = useState<string>('');
  const [nickname, setNickName] = useState<string>('');
  const [dob, setDob] = useState<string>('');
  const [email, setEmail] = useState<string>('');
  const [gender, setGender] = useState<string>('');

  const [errors, setErrors] = useState({
    name: '',
    nickname: '',
    dob: '',
    email: '',
    gender: '',
  });
  const handleSignup = () => {
    setErrors({
      name: '',
      nickname: '',
      dob: '',
      email: '',
      gender: '',
    });

    if (name.trim().length === 0) {
      setErrors(prevErrors => ({...prevErrors, name: 'Name is required'}));
      return;
    } else if (nickname.trim().length === 0) {
      setErrors(prevErrors => ({
        ...prevErrors,
        nickname: 'NickName is required',
      }));
      return;
    } else if (dob.trim().length === 0) {
      setErrors(prevErrors => ({
        ...prevErrors,
        dob: 'DateOfBirth is required',
      }));
      return;
    } else if (email.trim().length === 0) {
      setErrors(prevErrors => ({...prevErrors, email: 'Email is required'}));
      return;
    }
    const emailRegex = /^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/;
    if (!emailRegex.test(email)) {
      setErrors(prevErrors => ({...prevErrors, email: 'Invalid Email'}));
      return;
    } else if (gender.trim().length === 0) {
      setErrors(prevErrors => ({...prevErrors, gender: 'Gender is required'}));
      return;
    }
  };
  return (
    <View style={styles.container}>
      <View style={styles.headcontainer}>
        <Icon
          name="arrow-left"
          size={30}
          color="black"
          style={styles.arrow}
          onPress={() => navigation.goBack()}
        />
        <Text style={styles.headtext}>Fill Your Profile</Text>
      </View>

      <View style={styles.header}>
        <View style={styles.profileImage} />
        <TouchableOpacity style={styles.editIcon}>
          <Icon name="pencil" size={20} color="#fff" />
        </TouchableOpacity>
      </View>

      <View style={styles.inputContainer}>
        <TextInput
          placeholder="Full Name"
          style={styles.input}
          placeholderTextColor="#A9A9A9"
          onChangeText={setName}
        />
        {errors.name ? (
          <Text style={styles.errorText}>{errors.name}</Text>
        ) : null}
      </View>

      <View style={styles.inputContainer}>
        <TextInput
          placeholder="Nickname"
          style={styles.input}
          placeholderTextColor="#A9A9A9"
          onChangeText={setNickName}
        />
        {errors.nickname ? (
          <Text style={styles.errorText}>{errors.nickname}</Text>
        ) : null}
      </View>
      <View style={styles.inputContainer}>
        <TextInput
          placeholder="Date of Birth"
          style={styles.input}
          placeholderTextColor="#A9A9A9"
          onChangeText={setDob}
        />
        {errors.dob ? <Text style={styles.errorText}>{errors.dob}</Text> : null}
      </View>
      <View style={styles.inputContainer}>
        <TextInput
          placeholder="Email"
          style={styles.input}
          placeholderTextColor="#A9A9A9"
          onChangeText={setEmail}
        />
        {errors.email ? (
          <Text style={styles.errorText}>{errors.email}</Text>
        ) : null}
      </View>
      <View style={styles.inputContainer}>
        <TextInput
          placeholder="Gender"
          style={styles.input}
          placeholderTextColor="#A9A9A9"
          onChangeText={setGender}
        />
        {errors.gender ? (
          <Text style={styles.errorText}>{errors.gender}</Text>
        ) : null}
      </View>
      <TouchableOpacity style={styles.button} onPress={handleSignup}>
        <Text style={styles.buttonText}>Continue</Text>
      </TouchableOpacity>
    </View>
  );
};
export default SetUpProfile;
